// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mock_main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSMA is a mock of SMA interface.
type MockSMA struct {
	ctrl     *gomock.Controller
	recorder *MockSMAMockRecorder
}

// MockSMAMockRecorder is the mock recorder for MockSMA.
type MockSMAMockRecorder struct {
	mock *MockSMA
}

// NewMockSMA creates a new mock instance.
func NewMockSMA(ctrl *gomock.Controller) *MockSMA {
	mock := &MockSMA{ctrl: ctrl}
	mock.recorder = &MockSMAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMA) EXPECT() *MockSMAMockRecorder {
	return m.recorder
}

// isValid mocks base method.
func (m *MockSMA) isValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isValid indicates an expected call of isValid.
func (mr *MockSMAMockRecorder) isValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isValid", reflect.TypeOf((*MockSMA)(nil).isValid))
}

// sma mocks base method.
func (m *MockSMA) sma(n, offset int) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sma", n, offset)
	ret0, _ := ret[0].(float64)
	return ret0
}

// sma indicates an expected call of sma.
func (mr *MockSMAMockRecorder) sma(n, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sma", reflect.TypeOf((*MockSMA)(nil).sma), n, offset)
}
